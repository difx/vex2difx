#!/bin/env python

from sys import argv, exit
from os import system, chdir, getcwd, environ, popen
from os.path import isfile, isdir
from string import replace, strip, split, lower, upper, find
from glob import glob
import datetime

program = 'queueVex'
version = '1.2'

verbose = 1

observTxFile = 'observ.tx'
ccScriptDir = '/export/home/cc/vlba/scripts'
prestartTime = 300	# seconds
poststopTime = 30	# seconds
difxPath = '/home/swc/DiFX-2.0.1-64/bin'
difxbinpath = '/users/difx/bin'

# ------------------

mjd0 = datetime.datetime(1858, 11, 17, 0, 0)


def usage(cmd):
	print '\n%s version %s\n' % (program, version)
	print 'Usage: %s [options] <vexfile>\n' % cmd
	print 'Options can be:\n'
	print '-h or --help : print help info\n'
	print '-u or --usno : convert scripts to use USNO devices\n'
	exit(0)

def execute(cmd, nostdout=0):
	if verbose > 0:
		print 'About to execute: %s' % cmd
	if nostdout == 0:
		system(cmd)
	else:
		popen(cmd).readlines()

def vexPeek(vexFile):
	
	cmd = '%s/vexpeek %s' % (difxPath, vexFile)
	if verbose > 0:
		print 'Executing command: %s' % cmd

	p = popen(cmd)
	data = p.readlines()

	if len(data) == 0:
		return 'Error', 'Error', 'Error'
	
	obsCode = upper(strip(data[0]))
	obsSeg = ''

	if obsCode[0:5] == 'ERROR':
		return 'Error', 'Error', 'Error'

	if len(obsCode) > 3:
		if obsCode[0].isalpha() and obsCode[1].isalpha() and obsCode[2].isdigit():
			for i in range(3, len(obsCode)):
				if obsCode[i].isalpha():
					obsSeg = obsCode[i:]
					obsCode = obsCode[0:i]
					break;
		if obsCode[0].isalpha() and obsCode[1].isdigit():
			for i in range(2, len(obsCode)):
				if obsCode[i].isalpha():
					obsSeg = obsCode[i:]
					obsCode = obsCode[0:i]
					break;
		

	stationTimes = {}
	for d in data[1:]:
		s = split(strip(d))
		stationTimes[upper(s[0])] = [float(s[1])-prestartTime/86400.0, float(s[2])+poststopTime/86400.0]

	print 'This is experiment %s %s' % (obsCode, obsSeg)

	return obsCode, obsSeg, stationTimes

def mjd2datetime(mjd):
	mon = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']
	dt = datetime.timedelta(int(mjd), int((mjd - int(mjd))*86400.0 + 0.5))
	t = mjd0 + dt
	return '%04d%s%02d %02dh%02dm%02ds' % (t.year, mon[t.month-1], t.day, t.hour, t.minute, t.second)

def age(str):
	return 0

# -----------------

usnoConvert = False


args = []

for a in argv[1:]:
	if a in ['-u', '--usno']:
		usnoConvert = True
	elif a in ['-h', '--help']:
		usage(argv[0])
	elif a[0] == '-':
		print 'Unknown option %s' % a
		exit(0)
	else:
		args.append(a)

if len(args) != 1:
	usage(argv[0])

cwd = getcwd()

if find(upper(cwd), 'MARK5C') < 0:
	print '\nError: you must run this from within a MARK5C subdirectory\n'
	exit(0)

vexFile = args[0]

if vexFile[0] != '/':
	vexFile = '%s/%s' % (cwd, vexFile)

obsCode, obsSeg, stationTimes = vexPeek(vexFile)

tmpDir = '/tmp/' + replace(vexFile, '/', '-') + '.workdir'

if isfile(tmpDir) or isdir(tmpDir):
	print 'Error: cannot proceed as temporary directory %s already exists.  Delete and try again.' % tmpDir
	exit(0)

execute('mkdir -p %s' % tmpDir)

chdir(tmpDir)

execute('%s/vex2script %s' % (difxPath, vexFile))

scripts = glob('*.??.py')
scripts.sort()
for script in scripts:
	s = split(script, '.')
	station = lower(s[-2])
	expt = upper(s[0])
	print '\n==========================================================================='
	if station == 'gb':
		cc = 'gb-cc.gb.nrao.edu'

# GB not yet handled per the request of GB staff

		#print 'Warning: files for GB are not yet handled by this script'
		#print '\n==========================================================================='
		continue
	else:
		cc = '%s-cc' % station
	
	upperStation = upper(station)
	timeRange = stationTimes[upperStation]
	startDate = mjd2datetime(timeRange[0])
	stopDate = mjd2datetime(timeRange[1])
	print 'STATION %s : observing %s from %s to %s' % (upperStation, expt, startDate, stopDate)
	print '===========================================================================\n'

	if usnoConvert and ( upperStation == 'MK' or upperStation == 'PT' ) :
		print 'USNO Experiment %s' % (expt)
		print 'Modifying script file for %s to use USNO equipment.' % upperStation

		execute("mv %s %s.tmp" % (script, script))
		execute("""sed -e "s/recorder0[ ]*=[ ]*Mark5C('-1')/recorder0 = Mark5C('usno')/" -e "s/dbe0[ ]*=[ ]*RDBE(0,[ ]*'pfb')/dbe0 = RDBE(2, 'pfb')/" -e "s/subarray.set4x4Switch('1/subarray.set4x4Switch('2/" <%s.tmp >%s""" % (script, script))
		execute("rm %s.tmp" % script)

		print 'Done.\n'

	print 'Sending %s to %s' % (script, cc)
	execute('scp vlbamon@%s:%s/%s . 2>&1' % (cc, ccScriptDir, observTxFile), 1)
	if len(glob(observTxFile)) == 0:
		execute('touch %s' % observTxFile)

	observations = open(observTxFile).readlines()
	f = open(observTxFile, 'w')
	for o in observations:
		s = split(strip(o))
		if len(s) < 3:
			continue
		if age(s[1]) > 60:	# don't let observ.tx grow too large; delete entries after 60 days
			continue
		if s[0] == expt:
			continue	# don't keep old entry for same expt
		f.write(o)
	f.write('%s %s %s > %s\n' % (expt, startDate, stopDate, station))
	f.close()

	print 'Contents of %s at %s:' % (observTxFile, upperStation)
	system('cat %s' % observTxFile)
	print ''
	execute('scp %s %s vlbamon@%s:%s 2>&1' % (script, observTxFile, cc, ccScriptDir), 1)
	execute('rm %s' % observTxFile)

chdir(cwd)

execute('cp %s/*.py .' % tmpDir)
execute('rm -rf %s' % tmpDir);
