#!/bin/env python

from glob import glob
from sys import exit, argv
from string import upper, strip, split
from os import system, popen
from math import fabs
from os.path import getsize

def usage():
	print 'Usage: %s <project code>' % argv[0]
	print '\nwhere <project code> is of the form N3230'
	exit(0)

def detect(filename, n):
	# use 10 microsecond bins -> 1250 bins total
	foldfile = '/tmp/%s.fold.%d' % (prj, n)
	cmd = 'm5fold %s Mark5B-2048-16-2 1250 20000 80 %s' % (filename, foldfile)
	print 'Executing: %s' % cmd
	popen(cmd).readlines()

	data = open(foldfile).readlines()
	t = []	# time
	p = []	# power
	for d in data:
		if d[0] == '#':
			continue;
		s = split(strip(d))
		t.append(float(s[0]))
		v = 0.0
		for i in range(1, 17):
			v = float(s[i])
		p.append(v)

	l = len(t)

	d1 = []
	d2 = []

	for i in range(l):
		d1.append(p[(i+1)%l] + 0.5*p[(i+2)%l] - p[(i-1)%l] - 0.5*p[(i-2)%l])
		d2.append((p[(i+1)%l] + 0.5*p[(i+2)%l] - p[i] - 0.5*p[(i-1)%l]) * 1.414)
	o = open(foldfile+".edge", 'w')
	dt = 0.5*(t[1]-t[0])

	bestup = bestdown = 0.0
	up = down = 0.0
	upindex = downindex = 0

	for i in range(l):
		if d1[i] > bestup:
			bestup = d1[i]
			up = t[i]
			upindex = i
		if d1[i] < bestdown:
			bestdown = d1[i]
			down = t[i]
			downindex = i
		if d2[i] > bestup:
			bestup = d1[i]
			up = t[i] + dt
			upindex = i
		if d2[i] < bestdown:
			bestdown = d1[i]
			down = t[i] + dt
			downindex = i

	sumup = sumdown = 0.0
	nup = ndown = 0

	for i in range(l):
		if (i-upindex) % l < (i - downindex) % l:
			sumup += p[i]
			nup += 1
		else:
			sumdown += p[i]
			ndown += 1

	pup = sumup / nup
	pdown = sumdown / ndown

	yfactor = 2.0*(pup-pdown)/(pup+pdown)

	if up > down:
		# put the up state near zero
		up -= 0.0125

	print 'Rise at %10.8f sec, fall at %10.8f sec' % (up, down)
	print 'Tcal = %6.4f Tsys' % yfactor

	for i in range(l):
		o.write('%10.8f %10.4f %10.4f\n' % (t[i], d1[i], p[i]))
		o.write('%10.8f %10.4f %10.4f\n' % (t[i] + dt, d2[i], p[i]))
	o.close()

	return up, down, yfactor

def countmissing(files):
	# file numbers based on scan names
	n2 = 0		# last file number
	for f in files:
		n = int(f[-3:])
		if n > n2:
			n2 = n
	return len(files) - (n2-1)

if len(argv) != 2:
	usage()

nwarn = 0
nerror = 0

prj = argv[1]

filematch = '*%s_??_No00*' % upper(prj)
dirs = ['./', '/export/home/usno_data/', '/export/home/usno_data/n1%s/' % prj[1:], '/export/home/usno_data/n1%s/' % upper(prj[1:])]

for d in dirs:
	datafiles = glob(d+filematch)
	if len(datafiles) > 0:
		dir = d
		break;

if len(datafiles) == 0:
	print 'No data files for %s were found' % prj
	print 'Directories searched include:'
	for d in dirs:
		print '  %s' % d
	exit(0)

datafiles.sort()

nfile = len(datafiles)

filesize = 4102553600
periodtol = 0.00004
synctol = 0.000025

ntoobig = nperfect = ngood = nbad = 0
for d in datafiles:
	s = getsize(d)
	if s > filesize:
		ntoobig += 1
	elif s == filesize:
		nperfect += 1
	elif s > 0.9*filesize:
		ngood += 1
	else:
		nbad += 1

print ''

if nfile < 25 or nfile > 50:
	print 'ERROR: %d files found.  Expecting between 30 and 40!' % nfile
	print '       files were found in %s' % dir
	nerror += 1
elif nfile < 30 or nfile > 40:
	print 'WARNING: %d files found.  Expecting between 30 and 40!' % nfile
	print '         files were found in %s' % dir
	nwarn += 1
else:
	print '%d files found in %s' % (nfile, dir)

print ''


nmissing = countmissing(datafiles)

if nmissing > 3:
	print 'ERROR: %d expected files were found missing!' % nmissing
	nerror += 1
elif nmissing > 0:
	print 'WARNING: %d expected files were found missing!' % nmissing
	nwarn += 1

if ntoobig > 0:
	print 'WARNING: %d files are bigger than expected!' % ntoobig
	nwarn += 1
if nperfect == nfile:
	print 'All files are exactly the right length'
elif ngood > nfile/3 and nbad == 0:
	print 'File sizes look reasonable'
elif nbad > 0 and nbad < 3:
	print 'WARNING: %d files are quite a bit shorter than expected!' % nbad
	nwarn += 1
elif nbad > nfile/4:
	print 'ERROR: %d files are too short!' % nbad
	nerror += 1

print ''


nsyncerr = 0
nperioderr = 0

print 'Looking for switched power...'

print '\n... in file %s' % datafiles[1]
r1 = detect(datafiles[1], 1)
if fabs(r1[0]) > synctol:
	print '\nWARNING: Switched power rise time is offset by more than %d microsec' % int(synctol*1e6)
	print '       Synchronization may be lost!'
	nwarn += 1
	nsyncerr += 1
if (fabs(r1[0] - r1[1]) - 0.00625) > periodtol:
	print '\nWARNING: Switched power not close to 50% duty cycle'
	print '       Maybe Tsys is very high or switched power is not working'
	nwarn += 1
	nperioderr += 1
if r1[2] < 0.01:
	print '\nWARNING: Switched power is very weak'
	nwarn += 1

print '\n... in file %s' % datafiles[len(datafiles)/2]
r2 = detect(datafiles[len(datafiles)/2], 2)
if fabs(r2[0]) > synctol:
	print '\nWARNING: Switched power rise time is offset by more than %d microsec' % int(synctol*1e6)
	print '       Synchronization may be lost!'
	nerror += 1
	nsyncerr += 1
if (fabs(r2[0] - r2[1]) - 0.00625) > periodtol:
	print '\nWARNING: Switched power not close to 50% duty cycle'
	print '       Maybe Tsys is very high or switched power is not working'
	nwarn += 1
	nperioderr += 1
if r2[2] < 0.01:
	print '\nWARNING: Switched power is very weak'
	nwarn += 1

print '\n... in file %s' % datafiles[-1]
r3 = detect(datafiles[-1], 3)
if fabs(r3[0]) > synctol:
	print '\nWARNING: Switched power rise time is offset by more than %d microsec' % int(synctol*1e6)
	print '       Synchronization may be lost!'
	nerror += 1
	nsyncerr += 1
if fabs(fabs(r3[0] - r3[1]) -0.00625) > periodtol:
	print '\nWARNING: Switched power not close to 50% duty cycle'
	print '       Maybe Tsys is very high or switched power is not working'
	nwarn += 1
	nperioderr += 1
if r3[2] < 0.01:
	print '\nWARNING: Switched power is very weak'
	nwarn += 1

if nperioderr > 1:
	print '\nERROR: More than one duty cycle problem found'
	nerror += 1
if nsyncerr > 1:
	print '\nERROR: More than one sync problem found'
	nerror += 1

if nwarn == 0 and nerror == 0:
	print '\nEXCELLENT: This experiment looks good'
elif nerror > 0:
	print '\n%d problems were encountered --> This experiment likely failed!' % nerror
	print '\n---> The RDBE should be rebooted and the experiment should be rerun!'
else:
	print '\n%d minor deviations from perfect --> This experiment probably succeeded' % nwarn

print ''
